/*
    This is the main set up job for the wcms-cde project.
    Definitions for general purpose jobs (e.g. jobs which aren't tied to a specific branch)
    belong in this file.
*/

def FOLDER_NAME  = 'wcms-cde'    // Jenkins folder where the jbos will be placed.

def GH_REPO_NAME = 'wcms-cde'     // The project's repository name (as used in the URL).
//def TARGET_BRANCH = 'master'            // Branch to run against.
def TARGET_BRANCH = 'deployment'            // Branch to run against.
def GH_ORGANIZATION_NAME = 'NCIOCPL'   // GitHub Organization name (as used in the URL/userid).
def GH_USER_TOKEN_KEY = 'NCIOCPL-GitHub-Token'  // Jenkins ID of the credential string containing the GitHub access token for creating releases.
def NEXUS_USER_KEY = 'NCIOCPL-Nexus-Credentials' // Jenkins ID of the credentials object containing the nexus repository userid and password.
def CONFIG_SUBSTITUTIONS = 'WCMS-cde-config-substitutions-file' // Jenkins ID of the credentials object containing the CDE configuration substitution values.

def sourceRepository = "$GH_ORGANIZATION_NAME/$GH_REPO_NAME"
def toolsRepository = "$GH_ORGANIZATION_NAME/cancergov-build-tools"  // Where do we find the build tools.
def toolsBranch = "cde"

// Calculate the current folder path so the seed job is able to create jobs in the
// current folder without the user remembering to set the context manually.
// (Nested seed jobs - e.g. Create build job - do so by calling lookupStrategy.)
def NAME_LENGTH = JOB_BASE_NAME.length()
def FOLDER_PATH = JOB_NAME[0..((JOB_NAME.length() - NAME_LENGTH) - 2)]


import hudson.model.*

// Make a list of WCMS nodes
nodeList = []
def nodeListGlommer = { Slave item ->
  nodeName = item.computer.name
  if( nodeName.startsWith('WCMS-Red') ) {
  	nodeList << item.computer.name
  }
}
Hudson.instance.slaves.each { nodeListGlommer(it) }
def defaultNode = []
defaultNode << nodeList[0]


job("${FOLDER_PATH}/Deploy CDE") {
  description("Deploys a CDE build to the selected WCMS environment.")

  wrappers {
    credentialsBinding {
      usernamePassword('NEXUS_USER', 'NEXUS_PASS', NEXUS_USER_KEY)
    }

    environmentVariables {
      envs (
        GH_REPO_NAME : GH_REPO_NAME,
        TARGET_BRANCH : TARGET_BRANCH,
        GH_ORGANIZATION_NAME : GH_ORGANIZATION_NAME
      )
    }
  }

  parameters {
    gitParam('RELEASE_NAME') {
      description('Select the tag to be deployed.')
      type('TAG')
      sortMode('DESCENDING')
      tagFilter('cde-*')
    }

    nodeParam('NODE_NAME') {
      description('Where would you like to deploy it?')
      defaultNodes( defaultNode )
      allowedNodes( nodeList )
      trigger('multiSelectionDisallowed')
      eligibility('IgnoreOfflineNodeEligibility')
    }
  }

  scm {
    git {
      remote {
        name('origin')
        url("https://github.com/$sourceRepository")
      }
      branch("*/$TARGET_BRANCH")
      extensions {
        submoduleOptions {
          recursive(true)
        }
      }
    }
  }

  steps {
    batchFile("tools\\deploy\\deploy-cde.bat %RELEASE_NAME% %NODE_NAME%")
  }
}



job("${FOLDER_PATH}/Deploy config files") {
  description("Deploys only the configuration files to the selected WCMS environment.")

  wrappers {
    credentialsBinding {
      usernamePassword('NEXUS_USER', 'NEXUS_PASS', NEXUS_USER_KEY)
    }

    environmentVariables {
      envs (
        GH_REPO_NAME : GH_REPO_NAME,
        TARGET_BRANCH : TARGET_BRANCH,
        GH_ORGANIZATION_NAME : GH_ORGANIZATION_NAME
      )
    }
  }

  parameters {
    gitParam('RELEASE_NAME') {
      description('Select the tag to be deployed.')
      type('TAG')
      sortMode('DESCENDING')
      tagFilter('cde-*')
    }

    nodeParam('NODE_NAME') {
      description('Where would you like to deploy it?')
      defaultNodes( defaultNode )
      allowedNodes( nodeList )
      trigger('multiSelectionDisallowed')
      eligibility('IgnoreOfflineNodeEligibility')
    }
  }

  scm {
    git {
      remote {
        name('origin')
        url("https://github.com/$sourceRepository")
      }
      branch("*/$TARGET_BRANCH")
      extensions {
        submoduleOptions {
          recursive(true)
        }
      }
    }
  }

  steps {
    batchFile("tools\\deploy\\deploy-config.bat %RELEASE_NAME% %NODE_NAME%")
  }
}
